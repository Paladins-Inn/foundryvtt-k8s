world: &world "default"
theme: "dark"
language: "de.lang-de"
hostname: "changeme"
license: "changeme"
adminPassword: "changeme"
containerPreserveConfig: "true"
foundryHotReload: "true"

hashiCorpVault:
  enabled: false
  externalStore: {}
    # kind: ""
    # name: ""
    
    
  server: "http://vault.vault.svc.cluster.local:8200"
  path: "changeme"
  key: "changeme"
  version: "v2"
  secretRef:
    credential: "changeme"
    name: "changeme"

env:
  - name: "FOUNDRY_WORLD"
    value: *world
envFrom: []

storage:
  enabled: true
  mountPath: "/data"
  name: ""
  accessMode: ReadWriteOnce
  storageClass: ""
  size: 20Gi

image:
  repository: felddy/foundryvtt
  pullPolicy: IfNotPresent
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  automount: false
  annotations: {}
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext:
  fsGroup: 2000

securityContext:
   capabilities:
     drop:
     - ALL
   readOnlyRootFilesystem: false
   runAsNonRoot: true
   runAsUser: 1000
   runAsGroup: 2000

service:
  type: ClusterIP
  port: 30000

ingress:
  enabled: false
  tls:
    enabled: true
    cert-manager: true
    issuer: ""
    duration: ""
    renewBefore: ""
    key: ""
    cert: ""
  className: "openshift-default"
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts: []
  #  - host: chart-example.local
  #    paths:
  #      - path: /
  #        pathType: ImplementationSpecific
  # tls:
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
   limits:
     cpu: 1000m
     memory: 1024Mi
   requests:
     cpu: 500m
     memory: 512Mi

probles:
  enabled: false
startupProbe:
  httpGet:
    path: /api/status
    port: http
livenessProbe:
  httpGet:
    path: /api/status
    port: http
readinessProbe:
  httpGet:
    path: /api/status
    port: http

volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
